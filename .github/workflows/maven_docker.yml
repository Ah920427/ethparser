# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CICD with Maven k8s

on: [push, pull_request]

jobs:
  # Wait for up to a minute for previous run to complete, abort if not done by then
  pre-ci:
    runs-on: ubuntu-latest
    timeout-minutes: 100
    outputs:
      diff: ${{ steps.git-diff.outputs.diff }}
    steps:
      - name: 'Block Concurrent Executions'
        uses: softprops/turnstyle@v1
        with:
          poll-interval-seconds: 60
        env:
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}

      - uses: actions/checkout@v2

      # Get source code diff
      - uses: technote-space/get-diff-action@v4
        id: git-diff
        with:
          PATTERNS: |
            src/**/*.+(java|yml)
          FILES: |
            pom.xml
          
  build:

    needs: pre-ci
    # Run only if there are differences in the source code
    #if: needs.pre-ci.outputs.diff

    runs-on: ubuntu-latest

    services:
      # Label used to access the service container
      postgres:
        # Docker Hub image
        image: postgres:12
        # Provide the password for postgres
        env:
          POSTGRES_PASSWORD: harvest
          POSTGRES_USER: harvest 
          POSTGRES_DB: harvest
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Build with Maven
        run: >
          mvn
          -Dethparser.eth.web3Url="${{secrets.ETH_WEB3}}"
          -Dethparser.bsc.web3Url="${{secrets.BSC_WEB3}}"
          -Dethparser.eth.abiProviderKey=${{secrets.ETHERSCAN_TOKEN}}
          -Dethparser.bsc.abiProviderKey=${{secrets.BSCSCAN_TOKEN}}
          -Dspring.datasource.url=jdbc:postgresql://localhost:5432/harvest
          -Dspring.datasource.username=harvest
          -Dspring.datasource.password=harvest
          -Dmaven.test.skip=true
          -B package -ff -T 1 --file pom.xml

          #- name: Generate JaCoCo Badge
          #  id: jacoco
          #  uses: cicirello/jacoco-badge-generator@v2.0.1

          #- name: Log coverage percentage
          #  run: |
          #    echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          #    echo "branch coverage = ${{ steps.jacoco.outputs.branches }}"

          #- name: Commit the badge (if it changed)
          #  run: |
          #    if [[ `git status --porcelain` ]]; then
          #      git config --global user.name 'codecoverage'
          #      git config --global user.email 'codecoverage@users.noreply.github.com'
          #      git add -A
          #      git commit -m "Autogenerated JaCoCo coverage badge"
          #      git push
          #    fi
          #- name: Publish Unit Test Results
          #  uses: EnricoMi/publish-unit-test-result-action@v1
          #  if: always()
          #  with:
          #    files: target/surefire-reports/**/*.xml

          #- name: Upload JaCoCo coverage report
          #  uses: actions/upload-artifact@v2
          #  with:
          #    name: jacoco-report
          #    path: target/site/jacoco/

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
        id: extract_branch

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Build and Push to ECR public
        id: build-and-push
        uses: pahud/ecr-public-action@8cd826db40befb59b0cd0b60b22a7ba72d06a7f7
        with:
          tags: |
            public.ecr.aws/q3j2h8t6/ethparser:${{ steps.extract_branch.outputs.branch }}-${{ github.sha }}
      
            #- name: Login to Amazon ECR
            #  id: login-ecr
            #  uses: aws-actions/amazon-ecr-login@v1

            #- name: Build, tag, and push image to Amazon ECR
            #  id: build-image
            #  env:
            #    ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            #    ECR_REPOSITORY: ethparser
            #    BRANCH: ${{ steps.extract_branch.outputs.branch }}
            #    IMAGE_TAG: ${{ github.sha }}
            #  run: |
            #    # Build a docker container and
            #    # push it to ECR so that it can
            #    # be deployed to ECS.
            #    docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-$IMAGE_TAG .
            #    docker push $ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-$IMAGE_TAG
            #    echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$BRANCH-$IMAGE_TAG"

          #- name: Fill in the new image ID in the Amazon ECS task definition
          #  id: task-def
          #  uses: aws-actions/amazon-ecs-render-task-definition@v1
          #  with:
          #    task-definition: task-definition.json
          #    container-name: ethparser
          #    image: ${{ steps.build-image.outputs.image }}

          #- name: Deploy Amazon ECS task definition
          #  uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          #  with:
          #    task-definition: ${{ steps.task-def.outputs.task-definition }}
          #    service: ethparser-service
          #    cluster: default
          #    wait-for-service-stability: true
